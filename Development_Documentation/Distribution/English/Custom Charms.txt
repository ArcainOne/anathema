Anathema currently supports custom charms through manual entry of charm data
files, using the same format that we use to provide the data in our plugins. At
this time, we do not support modification to canon charms, only adding new
custom charms.

Please be advised that it is quite possible to create bogus data files that
confuse or break the application. The onus of not bricking Anathema is on you.
:)

To make use of this feature, find your Anathema repository folder, and create
a subdirectory under it called 'custom'. For each custom charm you wish to
add, there are two files you will need to be concerned with: One for the charm
data itself, and one for labeling it in the application.

=====================================================
   1) Charm data file
=====================================================

You will need to create a plaintext XML file, that has the following filename
pattern:

    Charms_(Type)_SecondEdition_(Label).xml
    
(Type) = This should be one of the character types (i.e., Solar, Lunar, etc),
or "Knack", or "MartialArts".
(Label) = Doesn't matter what this is, it is just a unique identifier to help
you keep your charms sorted.

Here is an example of what the content of that file should look like:

-----------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../charmreview-xmlns.xsl"?>
<charmlist xmlns="http://anathema.sourceforge.net/charms">
	<!-- Example Custom Charm -->
	<charm id="Solar.PeerlessCustomizationMethodology" exalt="Solar" group="Craft">
		<prerequisite>
			<trait id="Craft" value="4" />
			<essence value="3" />
            <charmReference id="Solar.CraftsmanNeedsNoTools" />
		</prerequisite>
		<cost>
			<essence cost="1" text="per awesome custom Charm"/>
		</cost>
		<duration duration="Instant" />
		<charmtype type="Simple" />
		<charmAttribute attribute="Native" visualize="true" />
		<source source="Custom" />
	</charm>
</charmlist>
-----------------------------------------------------------

The possible values of the fields above should be mostly self-explanatory for
simple purposes. While many more complicated options exist, such as creating OR
charm prerequisites, we strongly encourage you to save us some sanity and try
cracking open our JAR files to look at our data files for reference before
seeking help.

You can place multiple 'charm' tags, with all of the relevant information,
within the charmlist.

=====================================================
   2) Charm label file
=====================================================

Next, create a ".properties" file, like "Custom_Charms.properties". The name is
not important. You only need one such file, and it will be able to service all
of your charm data XMLs.

Within this file, you will need a single line to provide the label to be used
for the new charm ID you have defined, like so:

Solar.PeerlessCustomizationMethodology=Peerless Customization Methodology

If you wish to include a pre-loaded description of the charm, include an
additional line, along the lines of the following:

Solar.PeerlessCustomizationMethodology.Description=This Charm permits Peerless
Crafting of Custom Charms.